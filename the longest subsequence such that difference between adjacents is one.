#include<bits/stdc++.h>
using namespace std;

int longestSubseqWithDiffOne(int arr[], int n) 
{ 
    // Initialize the dp[] array with 1 as a 
    // single element will be of 1 length 
    int dp[n]; 
    for (int i = 0; i< n; i++) 
        dp[i] = 1; 
  
    // Start traversing the given array 
    for (int i=1; i<n; i++) 
    { 
        // Compare with all the previous elements 
        for (int j=0; j<i; j++) 
        { 
            // If the element is consecutive then 
            // consider this subsequence and update 
            // dp[i] if required. 
            if ((arr[i] == arr[j]+1) || 
                (arr[i] == arr[j]-1)) 
  
                dp[i] = max(dp[i], dp[j]+1); 
        } 
        
    } 
    int result = 1; 
    for (int i = 0 ; i < n ; i++) 
        if (result < dp[i]) 
            result = dp[i]; 
    return result; 
} 
    
    
    int main(){
        int t;
        cin>>t;
        while(t--){
            int n;
            cin>>n;
            int a[n];
            for(int i=0;i<n;i++){
                cin>>a[i];
            }
            cout<<longestSubseqWithDiffOne(a,n)<<endl;
        }
        return 0;
    }
    
